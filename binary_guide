A (hopefully) Short Explanation of Binary Numbers
by Toaster for RoP mud 05/11/12

Q: Why should I care about binary numbers?

A: see the last question in this document

Q: What is a binary number?

A: Simply put, it's a way of representing any number using only ones and zeros. The position from the right of each one or zero determines what power of 2 it represents, for example:

1000 = 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 0 * 2^0 = 2^4 = 8
0110 = 0 * 2^3 + 1 * 2^2 + 1 * 2^1 + 0 * 2^0 = 2^2 + 2^1 = 4 + 2 = 6

Q: What is x to the power of zero for any integer?

1, by definition.

Q: What are "bits" and "bytes?"

each one or zero is called a "bit"
a "byte" is a sequence of eight ones and zeros, like 00001000 = 16

Q: How can you be sure that you can represent all numbers this way?

A: the first "bit" or the rightmost bit, represents 2^0 = 1, so you can always add one to make your number odd. Since every even number is a multiple of 2, (2 * x = n) , the rest of the bits combined can make any even number. The proof of that is simple and left as an exercise for the reader.

Q: What is the "<< x" or "bit shift left by x" operator?

A: The << operator simply adds x zeros to the _right_ side of the binary number, for example:

(1000 << 1) = 10000 = 16   or 1000 << 2 = 100000 = 32

so, you can also use integers with this operator, like:

(8 << 1) = 10000 = 16

you can think of this operator as "binary multiplication by 2"... why? Think of 0001... (1 << x) = 1 * (2 * x)

Q: What does the bit shift right, or ">> x" do?

A: the reverse of the << operator, i.e. it divides a number by (2 * x)... BUT... any ones or zeros that are shifted too far to the right are dropped/ignored, so really it's the equivalent of dividing by two and then rounding down to the nearest whole number (no decimals, an integer) for numbers that are odd.

If you don't quite get that, no worries: the ">>" operator is hardly ever used, for reasons that will become clear later.

Q: What about binary addition and subtraction?

A: Binary addition is very easy, it's exactly like adding two integers except instead of carrying a one when the combined number in any column is > 10, you carry the one if the number in any column comes to 2... for example:

0011 = 0 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = 2 + 1 = 3
(PLUS)
0110 = 6
(EQUALS)
1001 = 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 8 + 1 = 9

which is what we expect by adding 3 to 6... so (3 + 6) = 9

subtraction is the reverse, as you would expect, except negative numbers become zero, by definition.

Q: What about the "binary and" or "&" operator?

A: this is much like the "logical and" or "&&" operator, except that it goes bit by bit, interpretting ones as true and zeros as false, for example

0011 = 3
&
0110 = 6
(EQUALS)
0010 = 2

in code this looks like:  (3 & 6) = 2

this is because the 2nd bit from the right is the only place in the binary numbers above that both have ones for that bit's value.

Q: And the "binary or" or "|" operator?

A: This does a bit-wise(meaning "on each bit") "or check", for example

0011 = 3
|
0110 = 6
(EQUALS)
0111 = 7

so (3 | 6) = 7, because in the 3rd, 2nd, and 1st bit either 3 or 6 has a value of one.

Q: Why are binary numbers used so often for constants, like in /lib/damage_types.h?

A: Because the "&" and "|" operators are very useful when constants can be combined and you want to see if a particular constant is present in the combined number... for example, in damage_types.h we have the code:

#define BLUNT              (1 << 1)
#define BLADE              (1 << 2)
#define KNIFE              (1 << 3)
#define WATER              (1 << 4)
#define SHOCK              (1 << 5)
#define COLD               (1 << 6)
#define HEAT               (1 << 7)
#define GAS                (1 << 8)
#define ACID               (1 << 9)
#define MAGIC              (1 << 10)
#define POISON             (1 << 11)
#define DISEASE            (1 << 12)
#define ROT                (1 << 13)
#define VACUUM             (1 << 14)
#define BITE               (1 << 15)
#define OTHER              (1 << 16)

#define MAX_DAMAGE_BIT     OTHER

#define ALL_DAMAGE  BLUNT | BLADE | KNIFE | WATER | SHOCK | COLD | HEAT | GAS | ACID | MAGIC | POISON | DISEASE | ROT | VACUUM | BITE |
OTHER

You should be able to tell what each of the (1 << x) statements above mean at this point in the document. But why is it that they're just right-shifting ones?
The answer to this lies in the fact that each number represented in binary will only have a bit with a value of one in a unique place (the x'th bit from the right) and zeros elsewhere... for example:

(BLUNT | WATER) = 1 | 8 = 0001 | 1000 = 1001 = 9

thus you can combine damage types with the "|" operator and be gauranteed a unique number that no other combination of damage types has. This is why ALL_DAMAGE is define as a binary or of all the damage types, which would be the binary number 1111111111111111

so now let's say we've set the damage type of some weapon to (BLUNT | WATER) = 1001. What if we want to know if BLUNT is a part of this damage if all we know is that the damage type is 9? Well:

9 = 1001
(1001 & BLUNT) = (1001 & 0001) = 0001 = BLUNT

so if we have a random integer dmg that represents a damage type defined as above, we can query what kinds of damages are in the number like this:

if(dmg & BLUNT == BLUNT) { DoSomething(); }

or, more simply:

if(dmg & BLUNT) { DoSomething(); }

because we know that no other damage types will have a one for a value for the same bit as BLUNT does, so unless BLUNT is a part of dmg, we will get a value of binary 0000 = 0 = false in LPC.

What should you do now? Go smoke a BLUNT.
